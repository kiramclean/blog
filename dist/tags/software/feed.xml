<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kira McLean | Software</title>
    <link>https://kiramclean.com/tags/software/</link>
    <description>Kira's posts about software</description>
    <lastBuildDate>Wed, 10 Mar 2021 08:15:19 -0500</lastBuildDate>
    <atom:link href="https://kiramclean.com/tags/software/feed.xml" rel="self" type="application/rss+xml"/>
    <generator>Morphy v0.0</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
      <item>
        <title>Ethics Are Missing From Software Development</title>
        <description>&lt;p&gt;There is something conspicuously missing from software development education. As developers, we learn all about how to write, organize, design, share, use, and test software, but the discussion of &lt;em&gt;how&lt;/em&gt; that software will actually be used and what it's impact on the world will be is usually an afterthought.&lt;/p&gt;
&lt;p&gt;What discussions do happen tend to be around licensing and intellectual property, with the main focus on not getting sued. That stuff matters, but it doesn't come close to addressing and grappling with the total impact of the tech industry.&lt;/p&gt;
&lt;p&gt;The effects of software on the world are &lt;em&gt;enormous&lt;/em&gt;. It affects the way we do everything and shows up in every corner of our lives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how we keep in touch with friends and family&lt;/li&gt;
&lt;li&gt;how we get around&lt;/li&gt;
&lt;li&gt;how we work&lt;/li&gt;
&lt;li&gt;how we learn about the world and make decisions&lt;/li&gt;
&lt;li&gt;how we grow up&lt;/li&gt;
&lt;li&gt;how we affect the planet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preventing our software from making the world worse should be at the top of our minds as technologists, but it's almost always on the backburner. There's a huge disconnect between writing some characters on a computer and seeing effects in the real world.&lt;/p&gt;
&lt;p&gt;I'm worried that's a really big problem, though. I really don't think it's an exaggeration to say that some of the most dire problems we need to collectively deal with in my lifetime are caused or exacerbated by software.&lt;/p&gt;
&lt;p&gt;Things like the environmental crisis. Bitcoin bullshit already &lt;a href=&quot;https://digiconomist.net/bitcoin-energy-consumption&quot;&gt;consumes more resources&lt;/a&gt; than many countries. Or the mental health crisis. There's &lt;a href=&quot;https://www.aeaweb.org/articles?id=10.1257/aer.20190658&quot;&gt;good evidence&lt;/a&gt; that suggests the internet makes us meaner, angrier, and sadder than ever. Or the erosion of democracy worldwide. There's no doubt that social media is responsible for flooding our information ecosystem with disinformation, which &lt;a href=&quot;https://science.sciencemag.org/content/359/6380/1146.full&quot;&gt;spreads like cancer&lt;/a&gt; through our networks and leads us to making irrational decisions that can have deleterious long term effects.&lt;/p&gt;
&lt;p&gt;I'm not advocating for every software engineer to become an ethicist, but we can do a lot better at being aware of the impact our work has on the world. It's definitely not nothing, and sometimes it's everything.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Mar 2021 00:00:00 -0500</pubDate>
        <link>https://kiramclean.com/blog/ethics-are-missing-from-software-development/</link>
        <guid isPermaLink="true">https://kiramclean.com/blog/ethics-are-missing-from-software-development/</guid>
      </item>
      <item>
        <title>Building A Fast Command Line App With Clojure</title>
        <description>&lt;p&gt;&lt;em&gt;&lt;time datetime=&quot;2021-02-18&quot;&gt;Originally published on February 18, 2021&lt;/time&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like most developers, I always have about a hundred ideas for little tools or apps I wish existed. Every once in a while I get the time and energy to magic one of them into existence. Clojure is my language of choice these days, but at first glance it's not super well suited to building little command-line apps (which is usually what I start with). Some things that make it not an obvious first choice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Slow JVM startup time. It usually takes a second or two or more to fire up a JVM, which is an unacceptable startup penalty if your whole app is just a little utility meant to run fast.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No coherent ecosystem. The Clojure community is very averse to batteries-included solutions. There are good reasons why, a main one being that we spend vastly more time maintaining apps than setting them up so we should aggressively avoid including non-essential dependencies, which add to our maintenance burden. This is fair and does work out really well for long-running projects (which is most Clojure projects). But, this means it's often frustrating and slow to get a new project started, compared to some languages at least. There's no &lt;code&gt;clojure new-cli-app&lt;/code&gt; type command you can just run to get a new app that works in 1 second.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is about how to build a command-line app with Clojure, using tools.deps and GraalVM.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I assume you already have Clojure (including the CLI) and GraalVM installed. I use &lt;a href=&quot;https://github.com/shyiko/jabba&quot;&gt;jabba&lt;/a&gt; to manage JVMs on my machine, and installed and setup a GraalVM by running  &lt;code&gt;jabba install graalvm-ce-java11@20.3.0&lt;/code&gt; and then &lt;code&gt;jabba use graalvm-ce-java11@20.3&lt;/code&gt;. You also need the &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/&quot;&gt;GraalVM native image&lt;/a&gt; utility, which I installed with &lt;code&gt;gu install native-image&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;GraalVM and Clojure community to the rescue&lt;/h2&gt;
&lt;p&gt;GraalVM is basically a super fast JVM, which solves the problem of slow startup time. You can use it to build a standalone executable out of your Clojure app that will run instantly.&lt;/p&gt;
&lt;p&gt;Even though there's no batteries-included way to manage Clojure projects, the community has put together a lot of great tools and guides the cover all the bases. The community seems to be converging around the &lt;a href=&quot;https://clojure.org/guides/deps_and_cli&quot;&gt;official Clojure CLI&lt;/a&gt; and associated tooling
as the preferred way to manage Clojure projects. It's extremely well designed, like most things Clojure, but, also like most things Clojure, it's very bare-bones. It's &lt;em&gt;not&lt;/em&gt; an all-in-one command-line utility you can use to manage your whole project, like the angular or rails CLIs (which I didn't appreciate nearly enough in my former life üò¢). You need to configure the Clojure CLI itself for it to be useful, but luckily that's really straightforward to do. What follows are the steps I did to make a new skeleton command-line app in Clojure. It follows the steps from &lt;a href=&quot;https://github.com/BrunoBonacci/graalvm-clojure/blob/master/doc/clojure-graalvm-native-binary.md&quot;&gt;this great guide&lt;/a&gt;, but I included the actual commands here because I use the Clojure CLI (&lt;code&gt;clj&lt;/code&gt;) instead of &lt;code&gt;lein&lt;/code&gt; to run things.&lt;/p&gt;
&lt;h2&gt;1. Make a new Clojure project&lt;/h2&gt;
&lt;p&gt;I use Sean Corfield's &lt;a href=&quot;https://github.com/seancorfield/clj-new&quot;&gt;&lt;code&gt;clj-new&lt;/code&gt;&lt;/a&gt; project to initialize new Clojure projects. Install it for your environment according the instructions in his README, then run &lt;code&gt;clj -X:new :template app :name kiramclean/test-cli&lt;/code&gt; to generate a new Clojure project (but replace &lt;code&gt;kiramclean/test-cli&lt;/code&gt; with &lt;code&gt;&amp;lt;your-name&amp;gt;/&amp;lt;project-name&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;2. Make an uberjar&lt;/h2&gt;
&lt;p&gt;The app template from &lt;code&gt;clj-new&lt;/code&gt; includes a default namespace that just prints &amp;quot;Hello, World!&amp;quot; and an alias for building an uberjar, which is just a java app that includes all the dependencies it needs so it can run on its own without worrying about what's installed or not on the host.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;clj -X:uberjar&lt;/code&gt; in your app directory, which should build a &lt;code&gt;test-cli.jar&lt;/code&gt;. You can run your app now like &lt;code&gt;java -jar test-cli.jar&lt;/code&gt;, and cry about how slow it is.&lt;/p&gt;
&lt;h2&gt;3. Make a standalone executable with GraalVM&lt;/h2&gt;
&lt;p&gt;Now you can use GraalVM to turn your uberjar into a snappy CLI. Run this magic command (note the names ‚Äî the &lt;code&gt;-jar&lt;/code&gt; option is the location of the uberjar you just made and &lt;code&gt;-H:Name=&lt;/code&gt; is the name of your future executable).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;native-image --report-unsupported-elements-at-runtime \
             --initialize-at-build-time \
             --no-server \
             --no-fallback \
             -jar test-cli.jar \
             -H:Name=test-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It takes a while on my machine for that to finish, but once it does you're good to go! You should have a standalone executable now that you can run from your terminal, which executes your Clojure app natively, and is way faster than running the jar on a regular JVM! Cool.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ùØ time java -jar test-cli.jar
Hello, World!
java -jar test-cli.jar  4.31s user 1.10s system 113% cpu 4.792 total

‚ùØ time ./test-cli
Hello, World!
./test-cli  0.05s user 0.01s system 70% cpu 0.086 total
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;That's all for now&lt;/h2&gt;
&lt;p&gt;I made an executable &lt;code&gt;bin/build&lt;/code&gt; script in my project with this in it to make the two steps above simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo &amp;quot;Build jar...&amp;quot;

clj -X:uberjar

echo &amp;quot;Nativize it...&amp;quot;

native-image --report-unsupported-elements-at-runtime \
             --initialize-at-build-time \
             --no-server \
             --no-fallback \
             -jar test-cli.jar \
             -H:Name=./test-cli

echo &amp;quot;Success! Good to run ./test-cli&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next thing I want to do is add some command-line options and a help menu, but this is already getting kind of long, so I'll leave it here for now. Happy coding üôÇ&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Feb 2021 00:00:00 -0500</pubDate>
        <link>https://kiramclean.com/blog/building-a-fast-command-line-app-with-clojure/</link>
        <guid isPermaLink="true">https://kiramclean.com/blog/building-a-fast-command-line-app-with-clojure/</guid>
      </item>
      <item>
        <title>Becoming A Software Developer</title>
        <description>&lt;p&gt;I get asked a lot for advice on becoming a software developer. I didn't study anything related to software in university, but now it's what I do for a living. I also spent about 3.5 years mentoring with &lt;a href=&quot;https://www.lighthouselabs.ca&quot;&gt;Lighthouse Labs&lt;/a&gt;, a local web development bootcamp, and watched (and would like to believe at least in some cases, helped) hundreds of people of every age from wildly diverse backgrounds get jobs as software developers.&lt;/p&gt;
&lt;p&gt;This is my advice for people with no technical experience who want to land their first job writing software. It's based on my experience as both a person who did it myself and as a mentor to other people who did it. There's no single right way to go about this, and no matter how you do it's a lot of work. But these are some things that have worked for other people, myself included. These suggestions are arranged roughly in order, but of course many overlap and kind of happen at the same time.&lt;/p&gt;
&lt;h2&gt;Know what you're getting yourself into&lt;/h2&gt;
&lt;p&gt;Software engineering is nothing like I expected it to be. All the hard parts involve dealing with people. Part of my original motivation for choosing a career in software was thinking I wouldn't have to deal much with people. I wasn't very good at it and didn't enjoy it, but my fantasy of just sitting in front of my computer all day and watching my bank account fill up was totally delusional.&lt;/p&gt;
&lt;p&gt;The reality of writing code for a living, in my experience, includes dealing with a lot of office politics, entitled middle managers, stressed out co-workers, and yes, condescencion and occasional harassment (especially if you're not male). I find the culture of the tech industry generally toxic and abusive and it has very nearly broken my spirit on multiple occasions.&lt;/p&gt;
&lt;p&gt;You won't be alone dealing with this. Your co-workers and countless people across the industry share the experience. And it is ultimately bearable.&lt;/p&gt;
&lt;p&gt;I don't say this to discourage anyone from getting into software, but just to highlight that the stuff you hear from recruiters is bullshit. It's not all free trips and fancy perks and big paycheques. It is those things, sure, but the reality is much less glamorous than they make it sound.&lt;/p&gt;
&lt;p&gt;Being a software developer means getting paid to solve other people's problems. The rest is fluff. This makes it a solid career path, though, because other people have a lot of problems.&lt;/p&gt;
&lt;p&gt;It is still an empowering and lucrative career. Despite my generally negative view of the industry, I still highly recommend and help people into a career in software regularly. Most individual software developers, like most people, are genuine and kind. And I can't speak to problems in other industries first hand, but I gather most high-paying, male-dominated industries are pretty similar anyway.&lt;/p&gt;
&lt;h2&gt;Meet lots of people&lt;/h2&gt;
&lt;p&gt;I was referred to three of the four programming jobs I've had so far through friends. I made friends with those people who were already programmers at meetups. I didn't ask them to get me a job, but a lot of companies are pretty much always looking for new software engineers, so when your friend hears you're looking for that kind of job, they can bring it up at work. I still did interviews, but it makes an enormous difference when someone the boss already knows and trusts can vouch for you.&lt;/p&gt;
&lt;p&gt;A word on meeting strangers. I, like many people who are into nerd things like software, am the most introverted person I know. I found hanging out in groups of new people excruciating at first, but honestly learning how to not be awkward around strangers is just as important as learning how to code if you want to do well in your career. I just went to the meetups and stood off to the side, awkwardly making eye contact with a few random people. Eventually a friendly extrovert would come up and initiate a conversation, and before I knew it I could hold my own in a crowd.&lt;/p&gt;
&lt;p&gt;Check out meetups for programming languages you're interested in, or if there aren't those kinds of groups where you live, join online communities. Most programming languages have a slack or discord server where people hang out, and in my experience people are usually very welcoming and kind to newbies (at least in the Ruby, Elixir, and Clojure communities; all of which I highly recommend).&lt;/p&gt;
&lt;h2&gt;Learn how to code, in public&lt;/h2&gt;
&lt;p&gt;Without any formal education in software development, you have to offer something else to prove you actually know how to write code. I did this by building a bunch of crappy side projects. The very first thing I ever did was replicate the Google landing page with HTML and CSS. The first actual app I made was a blackjack game with Sinatra. I also made Twitter and Reddit clones with Rails, and little browser games like Pacman with different JavaScript frameworks. Some of that code still exists in my &lt;a href=&quot;https://github.com/kmclean-old&quot;&gt;GitHub graveyard&lt;/a&gt; if you want to see what I mean by crappy. Other common toy projects include link shorteners, photo galleries, e-commerce stores, time trackers, or clones of whatever software you normally use, like spreadsheets, workflow management, calendars, etc. The possibilities are endless.&lt;/p&gt;
&lt;p&gt;Look for tutorials online that walk through how to build the kinds of things you're interested in. If you don't know where to start, &lt;a href=&quot;https://www.theodinproject.com&quot;&gt;The Odin Project&lt;/a&gt; and &lt;a href=&quot;https://www.freecodecamp.org&quot;&gt;Free Code Camp&lt;/a&gt; are two free programs that offer very realistic learning roadmaps. I did parts of both of those but never finished either. I also did several free courses on &lt;a href=&quot;https://www.coursera.org/browse/computer-science&quot;&gt;Coursera&lt;/a&gt; and &lt;a href=&quot;https://www.edx.org/course/subject/computer-science&quot;&gt;edX&lt;/a&gt;, which are both amazing but you have to be careful not to end up in a rabbit hole. Those two mostly have actual university courses, which are super interesting, but not very relevant to things you'll do in a real job.&lt;/p&gt;
&lt;p&gt;If your goal is to get from nothing to making money as a developer as fast as possible I recommend sticking to a more targeted learning roadmap like the two above. There are also countless paid ones which vary wildly in price and quality. Be weary about shelling out huge amounts of money for bootcamps. I did pay for a few months of &lt;a href=&quot;https://launchschool.com&quot;&gt;Launch School&lt;/a&gt; (which at the time was called &amp;quot;Tea Leaf Academy&amp;quot;), and it was the best career move I ever made. I highly recommend them because they're in a sweet spot of offering a robust and relevant curriculum without costing a fortune. It's not free ($200/month), but a few hundred dollars is a very small investment in the scheme of your career. Apparently they also offer a deferred payment option now, too.&lt;/p&gt;
&lt;p&gt;The career-oriented bootcamps will also teach you loads of useful practical things they don't teach in the free university courses, like version control (git), testing, and how to collaborate with other developers on one project.&lt;/p&gt;
&lt;p&gt;It took me 6 months of studying, meeting people, and building crappy software full time before I got my first internship. &lt;a href=&quot;https://www.lighthouselabs.ca/student-outcomes&quot;&gt;95% of Lighthouse Labs graduates&lt;/a&gt; are employed as software developers in that timeframe. Launch School delivers &lt;a href=&quot;https://launchschool.com/results&quot;&gt;impressive, concrete results&lt;/a&gt; for many of their students, too. I never finished most of the courses or programs I started. I funded that time off by living like a peasant on money I made running one of those student painting businesses the previous summer. Learning to code can feel like a slog at times, but just stick with it and you're very likely to be among the vast majority who succeed at this self-educated developer thing. It is a totally achievable and realistic goal and you're in good company.&lt;/p&gt;
&lt;p&gt;Other than doing free online courses and building apps from tutorials, other ways I learned in public during this time included blogging about my learning journey, making myself a portfolio website to showcase my little projects, and volunteering with some local tech communities. Do what works for you, but focus on ending up with at least a few medium sized projects you can show someone to prove you know how to make software that works.&lt;/p&gt;
&lt;h2&gt;Learn best practices&lt;/h2&gt;
&lt;p&gt;A surprising number of experienced developers still write really horrible code. Spend some time learning about software design and software engineering best practices to avoid becoming one of them. How you do that depends a lot on how you learn. (BTW, you should figure that out before you embark upon a journey of self-re-education for a career change). I absorb a lot from reading and prefer to learn by studying theory over trial and error, so reading and watching talks works really well for me. YMMV and you do ultimately just need experience to really get this stuff, but you don't have to start from scratch.&lt;/p&gt;
&lt;p&gt;Read &amp;quot;The Pragmatic Programmer&amp;quot; by Dave Thomas and Andrew Hunt, and anything by Sandi Metz. Watch Rich Hickey's talks, especially &amp;quot;&lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy/&quot;&gt;Simple Made Easy&lt;/a&gt;&amp;quot;, and Sarah Mei's &amp;quot;&lt;a href=&quot;https://brightonruby.com/2017/livable-code-sarah-mei/&quot;&gt;Livable Code&lt;/a&gt;&amp;quot;. Other classics include Eric Evans' &amp;quot;Domain Driven Design&amp;quot; and Martin Fowler's &amp;quot;Refactoring&amp;quot;. There are countless others and everyone has their opinion about what should be included in the software engineering canon, but these are my recommendations. They'll provide a solid foundation and ample fodder for further reading and watching.&lt;/p&gt;
&lt;h2&gt;Pour your heart out&lt;/h2&gt;
&lt;p&gt;Once you can write code that mostly works, start looking for a job. Put the word out that you're seeking your first role writing software. Hopefully one of your programmer friends will know about an open position, but you can still apply to random jobs on the internet, too. This has a very low success rate, but it's possible. I got one of my four jobs by firing my resume into the abyss. I included a very long and heartfelt cover letter about how I loved programming so much and really wanted to work for this specific company (which I did), and how I learn fast and really believed I could do the job if they'd give me a chance.&lt;/p&gt;
&lt;p&gt;It worked. The hiring manager said my letter caught his attention. I had one year of experience at that time and had never worked remotely before, but I got the job.&lt;/p&gt;
&lt;p&gt;Don't be afraid to be authentic. Don't lie and say you know more than you do, but don't sell yourself short, either. Bootstrapping a career in software is no small feat and there are many teams out there who would love to hire the kinds of self-starting fast learners who do it.&lt;/p&gt;
&lt;h2&gt;Don't be too picky (at first!)&lt;/h2&gt;
&lt;p&gt;The reality is that your first job or two will probably be pretty crappy and underpaid. At this point you're trying to convince someone to take a chance on you, and it's a trade off between your dignity and your future career. In the very beginning, you should prioritize gaining experience over almost everything else. Obviously never put up with anything you're uncomfortable with, but if you can stick it out it's worth setting the bar pretty low just to get your first few months of real job experience, IMHO.&lt;/p&gt;
&lt;p&gt;I lucked out and worked with the most amazing team in the world for my first job as a developer, but I discovered from the students I mentored that that is very much not the norm.&lt;/p&gt;
&lt;p&gt;There are pros and cons to every kind of company, so don't worry too much about finding the perfect fit right away. Focus on gaining experience at first so you can have the freedom to focus on finding the perfect fit later. I've worked with a few different kinds of companies and there are pros and cons no matter where you go.&lt;/p&gt;
&lt;p&gt;Big corporations usually have a lot of experienced developers and lethargic processes, so there's more opportunity to take your time and get help from people more advanced than you. The pressure is often pretty low because people have such low expectations for new developers, which honestly is fair. You have a lot of room to screw up because you're such a tiny cog in a massive machine. The downsides depend on your personality. For me it was that I find most large tech companies to be evil and didn't like the soul-crushing feeling of helping to build something I hated.&lt;/p&gt;
&lt;p&gt;Startups usually have fewer people available to be mentors, but more opportunity to take on disproportionate responsibility for your level, which can be an amazing learning experience in a different way. You also have a lot of room to screw up, but it's more because your screw ups just blend in with the overall culture of moving fast and breaking things. I now believe that's a ridiculous way to run a business, but when there's widespread acceptance of breaking even important things, you have a lot freedom to experiment and learn by trial and error.&lt;/p&gt;
&lt;h2&gt;Be a good student&lt;/h2&gt;
&lt;p&gt;Lastly, once you finally land your first job, be a good student. Treat your first year or two on the job like paid education, not your chance to go in and show everyone how it's done. You know way less than you think, and you have no idea what it takes to build functioning software systems, let alone to deploy or maintain them. Always be humble and eager to learn. Soak up every minute of attention you get from more experienced developers around you and learn from them. Not everything they say is wise or true, but pay attention and copy the things that work whilst ignoring the things that clearly don't.&lt;/p&gt;
&lt;p&gt;Learn how to ask good questions. Don't be afraid to ask for help, but before you do, at least try to figure out the problem yourself. Write down what you tried, and explain why you're surprised your attempt didn't work.&lt;/p&gt;
&lt;p&gt;There are certain things you can only really learn from experience on a real world project, so see what opportunities there are to learn those things, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;securing and backing up actual important customer data&lt;/li&gt;
&lt;li&gt;deploying a huge app with no downtime&lt;/li&gt;
&lt;li&gt;refactoring large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;adding new features to large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;fixing obscure bugs with no instructions to reproduce them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just a few examples of things you won't run into on your little demo projects. Pay attention to the problems you're dealing with at work that you don't run into on side projects and learn how to fix those. That's your pathway to levelling up. Most importantly, never stop learning.&lt;/p&gt;
&lt;h2&gt;That's all&lt;/h2&gt;
&lt;p&gt;Software development is a great career. It's allowed me to be financially independent and stable, travel the world, meet cool people, and lots more. My path won't work for everyone. There are as many different ways to become a software developer as there are people, but I've seen countless aspiring software engineers go through their own journeys and many of them touch on these points, so see how they fit in to your own path. And let me know how it goes üôÇ&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://kiramclean.com/blog/becoming-a-software-developer/</link>
        <guid isPermaLink="true">https://kiramclean.com/blog/becoming-a-software-developer/</guid>
      </item>
      <item>
        <title>What I Use Now Instead Of Google</title>
        <description>&lt;p&gt;I made a goal for myself in January 2020 to stop using Google products by the end of the year. That might sound like way too generous a timeline, but Google owned pretty much all of my data at that point, so it was a fairly large project. Plus I'm a slow and steady kind of person. I know if I give myself a generous enough timeline I can accomplish even things that seem too hard for me at first.&lt;/p&gt;
&lt;h2&gt;First, Why&lt;/h2&gt;
&lt;p&gt;Since I got into programming about 5 years ago, I kept hearing all these bad things about Google and how horrible of a company it is from other tech people. It always seemed a bit exaggerated to me, but the evidence has been piling up over the years. Learning about &lt;a href=&quot;https://gizmodo.com/google-is-helping-the-pentagon-build-ai-for-drones-1823464533&quot;&gt;their involvement&lt;/a&gt; with the US military's &lt;a href=&quot;https://dodcio.defense.gov/Portals/0/Documents/Project%20Maven%20DSD%20Memo%2020170425.pdf&quot;&gt;Algorithmic Warfare Cross-Functional Team (Project Maven)&lt;/a&gt; was the last straw for me &lt;sup id=&quot;footnote-1&quot;&gt;&lt;a href= &quot;https://kiramclean.com/blog/what-i-use-now-instead-of-google/#footnote-1-text&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but even before I learned about that I was pretty uncomfortable with a lot of what I heard. In Google's defence they eventually did &lt;a href=&quot;https://web.archive.org/web/20210101083904/https://www.nytimes.com/2018/06/01/technology/google-pentagon-project-maven.html&quot;&gt;pull out of the project&lt;/a&gt; after &lt;a href=&quot;https://web.archive.org/web/20201231204850/https://www.nytimes.com/2018/04/04/technology/google-letter-ceo-pentagon-project.html&quot;&gt;massive backlash by thousands of employees&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Still, I'm pretty convinced now that their continued existence is a catastrophe not only for public safety, but also for &lt;a href=&quot;https://www.vox.com/recode/2020/1/3/21030688/google-amazon-ai-oil-gas&quot;&gt;the environment&lt;/a&gt;, &lt;a href=&quot;https://www.nytimes.com/2018/11/01/technology/google-walkout-sexual-harassment.html&quot;&gt;gender equity&lt;/a&gt;, &lt;a href=&quot;https://www.telegraph.co.uk/technology/google/9739039/Googles-tax-avoidance-is-called-capitalism-says-chairman-Eric-Schmidt.html&quot;&gt;the economy&lt;/a&gt;, &lt;a href=&quot;https://www.vice.com/en/article/jgexe8/google-fired-an-engineer-who-wrote-code-telling-googlers-they-had-a-right-to-organize&quot;&gt;fair labour practices&lt;/a&gt;, &lt;a href=&quot;https://www.stallman.org/google.html#surveillance&quot;&gt;privacy&lt;/a&gt;, &lt;a href=&quot;https://www.nature.com/articles/s41562-020-00954-0&quot;&gt;journalism&lt;/a&gt;, &lt;a href=&quot;https://www.judiciary.senate.gov/download/epstein-testimony&quot;&gt;democracy&lt;/a&gt;, &lt;a href=&quot;https://www.vox.com/2018/4/3/17168256/google-racism-algorithms-technology&quot;&gt;race relations&lt;/a&gt;, and the &lt;a href=&quot;https://www.scientificamerican.com/article/big-tech-out-of-control-capitalism-and-the-end-of-civilization/&quot;&gt;project of civilization itself&lt;/a&gt;. But anyway, the point of this post isn't to motivate you to also quit Google. I'll tell you how I really feel some other time.&lt;/p&gt;
&lt;p&gt;The rest of this post is about the tools and services I replaced all the Google things with. I did mostly accomplish my goal, with a few caveats which I describe in the relevant sections.&lt;/p&gt;
&lt;h2&gt;Replacements&lt;/h2&gt;
&lt;p&gt;Here's the short version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GMail ‚Üí &lt;a href=&quot;https://protonmail.com/signup&quot;&gt;ProtonMail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome ‚Üí &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/developer/&quot;&gt;Firefox developer edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google search ‚Üí &lt;a href=&quot;https://duckduckgo.com/&quot;&gt;DuckDuckGo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Drive ‚Üí &lt;a href=&quot;https://www.sync.com/&quot;&gt;Sync&lt;/a&gt; and &lt;a href=&quot;https://www.backblaze.com/b2/cloud-storage.html&quot;&gt;Backblaze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google DNS ‚Üí &lt;a href=&quot;https://blog.cloudflare.com/announcing-1111/&quot;&gt;Cloudflare DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maps ‚Üí Apple maps&lt;/li&gt;
&lt;li&gt;YouTube ‚Üí Netflix, &lt;a href=&quot;https://www.ted.com/&quot;&gt;TED talks&lt;/a&gt;, conference archives, and still a little YouTube (anonymously in a &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/&quot;&gt;Firefox container&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Google Analytics ‚Üí &lt;a href=&quot;https://usefathom.com/&quot;&gt;Fathom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Everything else (calendar, reminders, photos, docs, video chat, news feeds) ‚Üí &lt;a href=&quot;https://nextcloud.com/signup/&quot;&gt;Nextcloud&lt;/a&gt;, running &lt;a href=&quot;https://kiramclean.com/blog/how-to-set-up-your-own-nextcloud-server/&quot;&gt;on my own instance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here's the long version:&lt;/p&gt;
&lt;h3&gt;GMail ‚Üí &lt;a href=&quot;https://protonmail.com/signup&quot;&gt;ProtonMail&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ProtonMail has free accounts, but I pay for the lowest level that allows use of a custom domain with it (‚Ç¨48/year) so I don't have to change my email address ever again if I want to switch providers. It was quite a pain to change my email address all over the place, but I started in May and just did it slowly over time. I highly recommend decoupling your email address from your email provider if you're considering switching. First of all an email from a custom domain seems more, not less, serious than a gmail address to most people. But the main reason is just so you don't have to change your email address ever again if (when) you want to switch to some newer, better email provider.&lt;/p&gt;
&lt;p&gt;I set up forwarding from my old GMail account to my new email address then filtered my mail for anything sent to the old address. If it was someone or some place I wanted to continue hearing from, I updated my email address with them. If not I unsubscribed. This turned out to be a wonderful opportunity to purge my newsletter and other email subscriptions. Also I'm happy to report most companies are now (finally) respecting unsubscribe requests. Two (looking at you Geektastic and Rakuten) continued to spam me after I requested they stop, so now I filter out all their mail as spam.&lt;/p&gt;
&lt;h3&gt;Chrome ‚Üí Firefox developer edition&lt;/h3&gt;
&lt;p&gt;I primarily use &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/developer/&quot;&gt;Firefox developer edition&lt;/a&gt; now for my browser, including for work. The developer tools are just as good as Chrome's for the kind of work I do.&lt;/p&gt;
&lt;p&gt;There are some web apps that literally or effectively only work in Chrome, which ironically perfectly illustrates the impetus for this whole undertaking. For those I use this &lt;a href=&quot;https://github.com/Eloston/ungoogled-chromium#downloads&quot;&gt;ungoogled Chromium&lt;/a&gt; browser, installed via homebrew.&lt;/p&gt;
&lt;p&gt;I still have Chrome installed on my computer because I need it for some work things. We use chromedriver for some integration tests and it wasn't trivially easy to trick it into using my Chromium installation instead of looking for Chrome. Replacing chromedriver is a headache, and also not my call to make at work. But it's also not really the point for me. If Google was reduced to a browser that developers can easily launch and control programmatically, I'd be satisfied. I don't use it for anything other than running automated tests at work now.&lt;/p&gt;
&lt;h3&gt;Google search ‚Üí &lt;a href=&quot;https://duckduckgo.com/&quot;&gt;DuckDuckGo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I mostly love DuckDuckGo, but there are certain categories of searches where Google returns better results. DuckDuckGo doesn't seem to return many results from forums (like stack overflow or other stack exchange sites), which is where there the answers to a lot of my questions are, unfortunately. So I still use Google Search sometimes, but I do it in a &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/&quot;&gt;Firefox container&lt;/a&gt; without being logged in to a Google account, which at least helps to avoid some of Google's incessant stalking.&lt;/p&gt;
&lt;p&gt;DuckDuckGo does seem to return better results when the answer is an image, video, or regular web page, which is cool, and I suspect means it would be a perfectly fine replacement for most people. For example this blog is easier to find via DuckDuckGo than Google, which is impressive because I share a name with a small-time TV celebrity who typically dominates search results. We even look sort of similar, it's wild.&lt;/p&gt;
&lt;h3&gt;Google Drive ‚Üí &lt;a href=&quot;https://www.sync.com/&quot;&gt;Sync&lt;/a&gt; and &lt;a href=&quot;https://www.backblaze.com/b2/cloud-storage.html&quot;&gt;Backblaze&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I use Sync to make my most used files available anywhere, and I've started moving a huge backlog of documents and notes I don't need to access often but don't want to throw away to Backblaze for longer term storage, just because it's cheaper. So far I just use their web UI to upload things in bulk and browse my files, but I'm looking into ways to do that more efficiently. I really need to de-clutter my digital life. I'm a major hoarder when it comes to digital files. I have scarcely deleted a document in the last 10 years, it's getting a bit ridiculous. But that's a goal for another year üôÇ. For now I'm just putting all those files I don't really need to access but don't want to throw away in Backblaze to deal with later.&lt;/p&gt;
&lt;p&gt;Between Sync and Backblaze I got 15GB of free storage, which is plenty for now, though as I move more and more or my scattered files over I'll have to start paying. Backblaze offers some of the cheapest object storage there is, at least.&lt;/p&gt;
&lt;h3&gt;DNS ‚Üí Cloudflare DNS&lt;/h3&gt;
&lt;p&gt;I used to use Google's DNS servers (8.8.8.8 and 8.8.4.4), now I use &lt;a href=&quot;https://blog.cloudflare.com/announcing-1111/&quot;&gt;Cloudflare's&lt;/a&gt; (1.1.1.1 and 1.0.0.1).&lt;/p&gt;
&lt;h3&gt;Maps, YouTube&lt;/h3&gt;
&lt;p&gt;These ones are harder to replace. I use Apple maps now most of the time, but I still use Waze (which was acquired by Google) for directions sometimes if I'm driving somewhere. For media I mostly watch Netflix, but I also watch a lot of &lt;a href=&quot;https://www.ted.com/&quot;&gt;TED talks&lt;/a&gt;. I used to also watch conference videos on YouTube. Now I check conference websites for those, and a lot of them have the recordings, although they're often hosted on YouTube anyway. And I also do still use YouTube sometimes, mostly for home workout videos, but also anonymously in an isolated container.&lt;/p&gt;
&lt;h3&gt;Analytics ‚Üí &lt;a href=&quot;https://usefathom.com/&quot;&gt;Fathom&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's been a while since I used Google Analytics, but I wanted to set up a basic hit counter for this blog and found Fathom. They provide simple privacy-focused analytics that work well enough for me. One really useful feature they have that I consider necessary now is being able to log analytics with a custom domain. Without this, visitors using ad-blockers don't get counted, which most estimates figure is now something like 40% of people, and probably more among tech-type people, like the ones most likely to find this blog.&lt;/p&gt;
&lt;p&gt;I tried Cloudflare's new server-side analytics for a month, but the data didn't make as much sense (it showed the overwhelming number of visits to my homepage, even though the other analytics I had set up showed them going to one post that did well on Hacker News, which makes way more sense). Anyway, the numbers didn't seem to add up. I guess to be fair I &lt;a href=&quot;https://twitter.com/kiraemclean/status/1340530206516387840&quot;&gt;don't quite understand&lt;/a&gt; how Fathom's numbers add up yet either, but their support has been helpful checking it out with me to try to help me reach some interpretation that makes sense. Fathom's dashboard is really simple, at least, which I like because it's easy to understand.&lt;/p&gt;
&lt;h3&gt;Calendar, reminders, photos, docs, video chat, news feeds ‚Üí &lt;a href=&quot;https://nextcloud.com/signup/&quot;&gt;Nextcloud&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For everything else I use Nextcloud now. I &lt;a href=&quot;https://kiramclean.com/blog/how-to-set-up-your-own-nextcloud-server/&quot;&gt;run my own instance&lt;/a&gt; of it, but there are lots of providers where you can just sign up for a simple account like anything else if you're not an insufferable nerd who enjoys maintaining servers, like me.&lt;/p&gt;
&lt;p&gt;This is where I have another caveat to mention. I haven't migrated all of my photos off of Google Photos yet because I have about 50,000 of them and it's just a really slow process. I estimated it would take me something like 70 hours to move them all manually, so I'm looking into better ways to do it. I'm confident I can find or maybe build something easier than manually downloading and uploading 50k files in less than 70 hours.&lt;/p&gt;
&lt;p&gt;Nextcloud does the job of automatically syncing photos from my phone, though, which is all I needed to be able to delete Google Photos from my devices. I'm not sure I'll actually stick with Nextcloud for photos in the long run. The gallery is a bit lacking. It looks like &lt;a href=&quot;https://piwigo.org/get-piwigo&quot;&gt;Piwigo&lt;/a&gt; might be a good alternative. Either way, I'm actually storing my photos in Backblaze, so I'll continue looking around for a different client for a bucket full of photos next year as I work on slowly culling my photos collection and migrating it to a new home.&lt;/p&gt;
&lt;h2&gt;Total Cost&lt;/h2&gt;
&lt;p&gt;I feel like I've won a lot by doing all this. I own my data now, so Google can't &lt;a href=&quot;https://www.businessinsider.com/google-users-locked-out-after-years-2020-10&quot;&gt;arbitrarily take it away from me&lt;/a&gt;, which gives me peace of mind. I'm no longer part of their ad ecosystem, being tracked all around the internet and having my attention sold to the highest bidder. And I also feel good about &amp;quot;voting with my feet&amp;quot;, so to speak. The fewer people use Google's free products, the lower their ability to sustain their unethical business model based on selling mass surveillance data.&lt;/p&gt;
&lt;p&gt;But I also lost some. Specifically a few hundred dollars.&lt;/p&gt;
&lt;p&gt;Getting paid and paying for things in multiple currencies is the bane of my financial existence, but overall the final total comes out to something like CAD$400/year (roughly $300), broken down like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ProtonMail - ‚Ç¨48/year (CAD$75)&lt;/li&gt;
&lt;li&gt;Custom domains (for email and my cloud) - $19.74/year (CAD$25)&lt;/li&gt;
&lt;li&gt;Linode server (for my Nextcloud instance) - $84/year (CAD$105)&lt;/li&gt;
&lt;li&gt;Carbon offsets - CAD$21/year&lt;/li&gt;
&lt;li&gt;Fathom analytics - $140/year (CAD$180)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, $140 of the total is for Fathom analytics, which an average person probably doesn't need. Without that it comes closer to about $160, which I think is a fair price to pay for privacy, freedom, and ownership. I'm also not paying anything for storage yet, though, so I expect this to cost more next year once I finally get all my photos and archives migrated to Backblaze or whatever I end up using.&lt;/p&gt;
&lt;p&gt;I should also emphasize it's entirely possible to switch off of Google to free alternatives. All the services I use have free tiers which are quite generous and most likely plenty for an average user. I do think people who can afford to should support independent software companies so they can run sustainable businesses off the money their customers give them and not off ad revenue, but when money is tight there are still lots of options.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Once I got over the initial mental hurdle of expecting everything to be free or as cheap as possible, it seemed totally reasonable to me to pay that much for all I'm getting. What made it click for me is that all those things aren't actually free. Google sells our information and our attention to the highest bidder to generate profit for themselves, then they don't share any of it with us, despite the fact that their entire business model couldn't even exist if we all just refused to fuel it.&lt;/p&gt;
&lt;p&gt;I know I'm just dreaming waiting for the day Google realizes the error of its ways and starts running an ethical business, but that doesn't mean it's not worth taking a stand in the meantime. Individually refusing to fuel the databases and algorithms Google profits from is one tiny thing it's totally possible to do.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: A lot of people in the comments have pointed out that it takes a lot more than this to actually escape Google's reach, which is true. My comment above that I'm &amp;quot;no longer part of Google's ad ecosystem&amp;quot; is an overstatement. As &lt;a href=&quot;https://news.ycombinator.com/item?id=25654222#25655515&quot;&gt;one commenter&lt;/a&gt; put it, &amp;quot;Google will still track much of what you do online. The internet is rotten with linked media, amp pages, blogs, and ads hosted on Google servers.&amp;quot; They're right, but that doesn't mean none of this has any impact. I find the de-googling community can be too defeatist and purist at times, but perhaps I swing too far the other direction here. I don't want to minimize the amount of effort it takes to truly become Google-free, but I also want to encourage and inspire average people to make these changes, which requires taking a more pragmatic approach.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=25654222&quot;&gt;Hacker News&lt;/a&gt;, &lt;a href=&quot;https://dev.to/kiraemclean/what-i-use-now-instead-of-google-56lf&quot;&gt;Dev.to&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/degoogle/comments/krexp7/i_spent_2020_replacing_all_the_google_things_in/&quot;&gt;Reddit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Footnotes&lt;/h3&gt;
&lt;p&gt;&lt;small id=&quot;footnote-1-text&quot;&gt;1. That previous link goes to a memo saying that the primary purpose of the project is &amp;quot;to field technology to augment or automate Processing, Exploitation, and Dissemination (PED) for tactical Unmanned Aerial System (UAS)&amp;quot;, which means making AI for drones so they can better target humans and other &amp;quot;targets&amp;quot;. That really bothers me. &lt;a href=&quot;https://kiramclean.com/blog/what-i-use-now-instead-of-google/#footnote-1&quot;&gt;‚Üµ&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 5 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://kiramclean.com/blog/what-i-use-now-instead-of-google/</link>
        <guid isPermaLink="true">https://kiramclean.com/blog/what-i-use-now-instead-of-google/</guid>
      </item>
      <item>
        <title>Why Are Websites So Complicated Now?</title>
        <description>&lt;p&gt;I first got into programming because I wanted to make my own websites. Back then
all it took was two files, an &lt;code&gt;index.html&lt;/code&gt; and a style sheet. I recently decided
to take up blogging again and started looking around for a simple static site
generator. There are a couple of reasons why I avoided some other approaches.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have had negative experiences with Wordpress that make me not want to use it
again. Plus it is way more sophisticated than I need for a simple place to
publish some thoughts.&lt;/li&gt;
&lt;li&gt;I want unambiguous ownership of my blog. Less important but also relevant, I
want to easily be able to control how it looks. This rules out quite a few
popular batteries-included blogging platforms.&lt;/li&gt;
&lt;li&gt;I do not want to setup (or pay for) a server somewhere to serve a simple
website with only static pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've been writing software for the internet for some years now, but it's been a
while since I worked on anything like what we think of as a normal website. When
I started looking into how those are made these days, I was surprised to find
mostly complicated, bloated frameworks that nearly completely abstract away the
basic task of generating HTML.&lt;/p&gt;
&lt;p&gt;It doesn't take multiple new languages, frameworks, or build tools to make a
really simple website.&lt;/p&gt;
&lt;h2&gt;Content is not software&lt;/h2&gt;
&lt;p&gt;Frameworks are for people building sophisticated software that happens to run in
a browser. There is no need for them if all you want to do is put some content
on the internet. I will argue that if your main goal is publishing content you
don't even need JavaScript at all.&lt;/p&gt;
&lt;p&gt;JavaScript frameworks mostly help by allowing us to write non-trivial software
in a language less terrible than JavaScript itself. They can also help with
things like managing state, reacting to user input, and communicating
asynchronously with a server to get new information onto a page without needing
to refresh the whole thing. None of these challenges are present when the main
purpose of a website is to display static information.&lt;/p&gt;
&lt;p&gt;For that, all we should need is a language to markup our plain words into
something a browser can render, like HTML.&lt;/p&gt;
&lt;h2&gt;A simple static site generator&lt;/h2&gt;
&lt;p&gt;I prefer writing software over configuring software, and I resent things that
are more complicated than they need to be. I'm a minimalist by nature and I am
against the direction our industry is currently headed -- shipping bloated and
buggy software by the ton -- but that's a topic for another day.&lt;/p&gt;
&lt;p&gt;After some investigation and frustration trying to do simple things, like edit
canned templates or change the source and structure of my content, I of course
decided to write my own static site generator, like any sane developer would do.&lt;/p&gt;
&lt;p&gt;For now all it does is convert my posts (which I write in markdown) into HTML
and insert that HTML into a template, then put those files in the right place.
As my blog grows I'll add more features, and maybe even make it useful enough
for someone else to use someday. For now it's a simple solution that works on my
machine, and was definitely more enjoyable for me to write than was faffing with
configuring the other tools I tried.&lt;/p&gt;
&lt;h2&gt;A plea for simplicity&lt;/h2&gt;
&lt;p&gt;I get that a lot of people are not making simple websites anymore. There is some
seriously sophisticated software running in browsers now, which I understand is
the reason for the proliferation of JavaScript frameworks and build tools
currently plaguing our work lives.&lt;/p&gt;
&lt;p&gt;A lot of people are still simply publishing content to the internet, though, and
we seem to have forgotten what a website is really made of. It's just HTML
(which is supposed to semantically mark up content to describe its &lt;em&gt;meaning
and structure&lt;/em&gt;), and optional styling with CSS (to describe it's
&lt;em&gt;appearance&lt;/em&gt;). These languages are not so complicated to write that we
need complex frameworks that add a dozen more layers between the content and the
final static pages. If all you want is to put some information on the internet,
see if an old fashioned HTML file might be all you need.&lt;/p&gt;
</description>
        <pubDate>Mon, 3 Aug 2020 00:00:00 -0400</pubDate>
        <link>https://kiramclean.com/blog/why-are-websites-so-complicated-now/</link>
        <guid isPermaLink="true">https://kiramclean.com/blog/why-are-websites-so-complicated-now/</guid>
      </item>
  </channel>
</rss>
